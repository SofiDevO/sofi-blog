---
import MainBranch from "./svgs/MainBranch.astro";
import DivergeBranch from "./svgs/DivergeBranch.astro";
import GitIcon from "./svgs/GitIcon.astro";
import MergeBranch from "./svgs/MergeBranch.astro";
import SofiIcon from "./svgs/SofiIcon.astro";
---

<section class="github">
  <div class="github__anim">
    <div class="icon">
      <GitIcon />
    </div>
    <div class="branch-container">
      <MergeBranch />
      <MainBranch />
      <DivergeBranch />
      <div class="buble buble-main buble-main-1"></div>
      <div class="buble buble-main buble-main-2"></div>
      <div class="buble buble-main buble-main-3"></div>
      <div class="buble buble-main buble-main-4"></div>
      <div class="buble buble-main buble-main-5"></div>
      <div class="buble buble-main buble-main-6"></div>
      <div class="buble buble-main buble-main-7"></div>

      <div class="buble buble-merge buble-merge-1"></div>
      <div class="buble buble-merge buble-merge-2"></div>
      <div class="buble buble-diverge buble-diverge-1"></div>
      <div class="buble buble-diverge buble-diverge-2"></div>
    </div>
    <div class="icon">
      <SofiIcon />
    </div>
  </div>
  <article class="github__content">
    <h2 class="support__title support__title--secondary">
      Dev Contributors
    </h2>
      <p class="github__description">
        sdsEx sit incididunt ullamco aliquip consequat. Reprehenderit labore
        consectetur culpa commodo.
      </p>
      <p class="github__description">
         Lorem exercitation elit deserunt esse do
        commodo magna. Sunt ea ut esse minim quis culpa.
      </p>
  </article>
</section>

<script>
  const container = document.querySelector(".github");
  const line1 = container.querySelector("#line-1");
  const line2 = container.querySelector("#line-2");
  const line3 = container.querySelector("#line-3");
  const bubles = container.querySelectorAll(".buble");


  const interceptBranch = (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("active");
        return;
      }
      entry.target.classList.remove("active");
    });
  };
  const options = {
    root: null,
    rootMargin: "0px",
    threshold: 0.6,
  };
  const observer = new IntersectionObserver(interceptBranch, options);
  observer.observe(line1);
  observer.observe(line2);
  observer.observe(line3);

  bubles.forEach((buble) => {
    observer.observe(buble);
  });


</script>
