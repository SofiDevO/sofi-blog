---
export const prerender = true;
import Layout from "@layouts/Layout.astro";
import SideBar from "@molecules/sideBar/SideBar.astro";
import SideBarContent from "@molecules/sideBar/SideBarContent.astro";
import Loader from "@src/components/atoms/Loader/Loader.astro";
import Title from "@src/components/atoms/Title/Title.astro";
import Comments from "@src/components/organisms/Comments/Comments.astro";
import PostDetail from "@src/components/organisms/Posts/components/post-detail/PostDetail.astro";
import { PostContentData } from "@src/services/getPostContent";
const { slug } = Astro.params;

export async function getStaticPaths() {
  const data = PostContentData;
  return data?.posts?.nodes.map((post: any) => {
    return {
      params: { slug: post.slug },
      props: { post },
    };
  });
}

const { post } = Astro.props as any;

if (!post) {
  throw new Error(`Post not found for slug: ${slug}`);
}

const { id } = post;
const postImage =
  post?.featuredImage?.node?.mediaItemUrl || "/img/branding/logo.png";

const { date } = Astro.props;
const category = post?.categories?.nodes?.[0];
const author = post.author?.node;
const keyWords = post?.tags?.nodes?.map((keyword) => keyword?.name).join(", ");
---

<Layout image={postImage} title={post.title} description={post.seo.metaDesc}>
  <meta
    slot="head"
    name="author"
    content=`${author.firstName} ${author.lastName}, ${post.author.node.name} `
  />
  <meta slot="head" property="article:published_time" content={post.date} />
  <meta slot="head" property="article:modified_time" content={post.modified} />
  <meta slot="head" name="keywords" content={keyWords} />
  <!-- end of HEAD tags -->

  <section class="flex flex-col justify-center w-full pt-36 pb-20 px-10">
    <div
      class="group w-full max-w-[1100px] mx-auto overflow-hidden rounded-[1.2rem] md:h-[506.25px] bg-cover bg-center bg-no-repeat relative flex flex-col items-start justify-end px-5 py-10 mb-20"
      style={`background-image: url(${
        post?.featuredImage?.node?.mediaItemUrl || "/img/defaultBanner.png"
      })`}
    >
      <div
        class="absolute top-0 left-0 w-full h-full bg-gradient-to-b backdrop-blur-sm md:backdrop-blur-0 from-transparent to-[#050505]"
      >
      </div>
      <Title
        titleDesc={post.title}
        class="font-bold text-[2.5rem] md:text-[4rem] my-10 text-center text-pretty z-10"
      >
        {post.title}
      </Title>
    </div>

    <div
      class="flex w-full max-w-[1200px] gap-10 md:gap-2 flex-wrap mx-auto flex-col md:flex-row items-start justify-around"
    >
      <!-- Post Detail -->
      <div id="post" class="w-full basis-[65%] min-h-screen flex flex-col">
        <PostDetail {post} {author}>
          <Comments slug={slug} postID={id} server:defer>
            <div slot="fallback">
              <Loader />
            </div>
          </Comments>
        </PostDetail>
      </div>
      <!-- Aside -->
      <SideBar>
        <SideBarContent category={category} />
      </SideBar>
    </div>
  </section>

  <div class="progress"></div>
</Layout>

<script>
  import { commentsController } from "@controllers/comments.controller";
  import { InsertButtonCopy } from "@pages/blog/button-copy";
  commentsController();
  InsertButtonCopy();

  const tocBase = document.querySelector("#toc_container");
  const tocContainer = document.querySelector("#toc__container") as HTMLElement;

  // tocContainer

  tocContainer.insertAdjacentHTML("afterbegin", tocBase.innerHTML);
  tocBase.remove();

  let tocTitle = tocContainer.querySelector(".toc_title")

  let icon = document.createElement("div");
  icon.innerHTML = `<iconify-icon icon="cuida:dropdown-outline" width="24" height="24"  style="color: #2dcece"></iconify-icon>`;
  tocTitle.appendChild(icon);


  tocTitle.addEventListener("click", () => {
    tocContainer.classList.toggle("active");
  });
</script>

<style lang="scss" is:global>
  @use "@sass/variables" as *;

  .progress {
    height: 0.2rem;
    width: 100%;
    background: $french-violet;
    position: fixed;
    top: 0;
    left: 0;
    transform-origin: 0 50%;
    animation: progressStatus auto linear;
    animation-timeline: scroll(root);
  }
  #toc__container {
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    background-color: var(--bg-card);
    color: $mainColor;
    overflow: hidden;
    border-radius: 7px;
    height: 5rem;
  }
  #toc__container.active {
    height: 34rem;
  }
  .toc_title {
    cursor: pointer;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    font-weight: 600;
  }

  .toc_list {
    height: 30rem;
    padding: 0 0 1rem 1rem;
    transition: height 0.3s ease-in-out;
    scrollbar-color: $ufo-green $french-violet;
    scrollbar-width: thin;
    overflow-y: auto;
    & li > a {
      font-size: 1.4rem;
      color: $mainColor;
    }
  }
  .toc_list > *:is(li):not(:last-child) {
    border-bottom: 1px solid lightgrey;
    & span {
    }
  }
  .toc_list li > ul {
    margin-left: 1rem;


  }



  .toc_number:has(> li) {
    font-weight: 900!important;

  }

.toc_number.toc_depth_1, .toc_number.toc_depth_2 {
  font-size: 1.8rem;
  font-weight: 700;
}
  .dark {
    .progress {
      background: $ufo-green;
    }
  }

  @keyframes progressStatus {
    0% {
      transform: scaleX(0);
    }
    100% {
      transform: scaleX(1);
    }
  }
</style>
