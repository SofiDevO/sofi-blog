---
const { currentPage, totalPages, baseUrl, query, page } = Astro.props;

// Determinar si usar URLs de Astro paginate() o query parameters
const useAstroPagination = Boolean(page);
const prevUrl = useAstroPagination ? page.url.prev : `${baseUrl}?page=${currentPage - 1}`;
const nextUrl = useAstroPagination ? page.url.next : `${baseUrl}?page=${currentPage + 1}`;

// Función para generar URL de página específica
function getPageUrl(pageNum) {
  if (useAstroPagination) {
    // Para paginación estática de Astro
    return pageNum === 1 ? baseUrl : `${baseUrl}/${pageNum}`;
  } else {
    // Para paginación con query parameters
    const queryString = new URLSearchParams(query || "");
    queryString.set("page", pageNum.toString());
    return `${baseUrl}?${queryString}`;
  }
}
---

<section class="pagination">
  <div class="pagination__container">
    {/* Botón Anterior */}
    {(useAstroPagination ? prevUrl : currentPage > 1) ? (
      <a
        aria-label="Ir a la página anterior"
        data-astro-prefetch="hover"
        href={prevUrl}
        class="pagination__link pagination__link--active"
      >
        Anterior
      </a>
    ) : (
      <span class="pagination__link pagination__link--disabled">
        Anterior
      </span>
    )}

    {/* Números de página */}
    {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
      <a
        aria-label={`Ir a la página ${pageNum}`}
        data-astro-prefetch="hover"
        href={getPageUrl(pageNum)}
        class:list={[
          "pagination__link",
          pageNum === currentPage ? "pagination__link--current" : "",
        ]}
      >
        {pageNum}
      </a>
    ))}

    {/* Botón Siguiente */}
    {(useAstroPagination ? nextUrl : currentPage < totalPages) ? (
      <a
        aria-label="Ir a la página siguiente"
        data-astro-prefetch="hover"
        href={nextUrl}
        class="pagination__link pagination__link--active"
      >
        Siguiente
      </a>
    ) : (
      <span class="pagination__link pagination__link--disabled">
        Siguiente
      </span>
    )}
  </div>
</section>

<style>
  .pagination {
    display: flex;
    justify-content: center;
    margin: 2rem 0;
  }

  .pagination__container {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .pagination__link {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    text-decoration: none;
    color: var(--text-color);
    background-color: var(--bg-color);
    transition: all 0.2s ease;
    font-weight: 500;
  }

  .pagination__link--active:hover {
    background-color: var(--accent);
    color: white;
    border-color: var(--accent);
  }

  .pagination__link--current {
    background-color: var(--accent);
    color: white;
    border-color: var(--accent);
  }

  .pagination__link--disabled {
    opacity: 0.5;
    cursor: not-allowed;
    color: var(--text-muted);
  }

  @media (max-width: 768px) {
    .pagination__container {
      gap: 0.25rem;
    }

    .pagination__link {
      padding: 0.375rem 0.75rem;
      font-size: 0.875rem;
    }
  }
</style>
